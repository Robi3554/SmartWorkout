@page "/login"

@using SmartWorkout.DBAccess.Entities
@using SmartWorkout.DataAccess
@using SmartWorkout.DataAccess.Repositories
@using SmartWorkout.ViewModels
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject IGenericRepository<User> repo
@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider AuthStateProvider

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <img src="/loginImages/login_logo.png" style="max-height:5rem;" />
                <h3>LOGIN</h3>
            </div>
            <div class="mb-3">
                <label>Email</label>
                <InputText @bind-Value="Model.Email" class="form-control" placeholder="Email" />
                <ValidationMessage For="() => Model.Email" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="Model.Password" type="password" class="form-control" placeholder="Password" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();

    private string? errorMessage;

    private async Task Authenticate()
    {
        var userAccount = (await repo.GetAllAsync()).FirstOrDefault(u => u.Email == Model.Email);

        if (userAccount is null || userAccount.Password != Model.Password)
        {
            errorMessage = "Invalid Email or Password";
            return;
        }

        AuthStateProvider.SignIn(Model.Email, userAccount.Role, userAccount.Name, userAccount.Surname, userAccount.Id);

        Navigation.NavigateTo("/");
    }
}
