@page "/addclient"
@using SmartWorkout.DBAccess.Entities
@using SmartWorkout.DataAccess.Repositories

@inject IGenericRepository<User> repo;
@inject NavigationManager Navigation;

<h3>AddClient</h3>

<EditForm Model="newUser" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3 w-50">
        <label for="name">Name</label>
        <InputText id="name" class="form-control" @bind-Value="newUser.Name"/>
        <ValidationMessage For="@(() => newUser.Name)" />
    </div>
    <div class="mb-3 w-50">
        <label for="surname">Surname</label>
        <InputText id="surname" class="form-control" @bind-Value="newUser.Surname" />
        <ValidationMessage For="@(() => newUser.Surname)" />
    </div>
    <div class="mb-3 w-50">
        <label for="email">Email</label>
        <InputText id="email" class="form-control" @bind-Value="newUser.Email" />
        <ValidationMessage For="@(() => newUser.Email)" />
    </div>
    <div class="mb-3 w-25">
        <label for="phone">Phone</label>
        <InputText id="phone" class="form-control" @bind-Value="newUser.Phone" />
        <ValidationMessage For="@(() => newUser.Phone)" />
    </div>
    <div class="mb-3 w-25">
        <label for="weight">Weight</label>
        <InputNumber id="weight" class="form-control" @bind-Value="newUser.Weight" />
        <ValidationMessage For="@(() => newUser.Weight)" />
    </div>
    <div class="mb-3 w-25">
        <label for="age">Age</label>
        <InputNumber id="age" class="form-control" @bind-Value="newUser.Age" />
        <ValidationMessage For="@(() => newUser.Age)" />
    </div>
    <div>
        <button type="submit" class="btn btn-primary">Add User</button>
    </div>
</EditForm>

@code {
    private User newUser = new User();

    protected override void OnInitialized() => newUser ??= new();

    private async Task Submit()
    {
        newUser.Name = CapitalizeFirstLetter(newUser.Name);
        newUser.Surname = CapitalizeFirstLetter(newUser.Surname);

        await repo.AddAsync(newUser);
        Navigation.NavigateTo("/users");
        //newUser = new User();
    }

    private string CapitalizeFirstLetter(string value)
    {
        if (!string.IsNullOrEmpty(value))
        {
            return char.ToUpper(value[0]) + value.Substring(1);
        }
        else
        {
            return string.Empty;
        }
    }
}
