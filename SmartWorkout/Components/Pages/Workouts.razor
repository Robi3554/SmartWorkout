@page "/workouts/{userID:int}"
@using SmartWorkout.DBAccess.Entities
@using SmartWorkout.DataAccess.Repositories
@using MudBlazor
@using SmartWorkout.DataAccess.Services
@using System.Security.Claims

@inject IGenericRepository<User> repoU;
@inject IGenericRepository<Workout> repoW;
@inject IGenericRepository<ExerciseLog> repoEl;
@inject NavigationManager Navigation;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject FollowService FollowService

@attribute [StreamRendering]

@rendermode InteractiveServer

<PageTitle>Workouts</PageTitle>

<h1>Workouts</h1>

@if (workouts == null)
{
    <p><em>Loading...</em></p>
}
else if (workouts.Count == 0)
{
    <p><em>No workouts found for this user.</em></p>
}
else
{
    <h2>Workouts for @selectedUser.Name @selectedUser.Surname</h2>
    @if (selectedUser.TrainerId != null)
    {
        var trainer = users.FirstOrDefault(t => t.Id == selectedUser.TrainerId);
        if (trainer != null)
        {
            <h2>Trainer: @trainer.Name @trainer.Surname</h2>
        }
    }
    <div class="row">
        @foreach (var workout in workouts)
        {
            <div class="col-lg-4 col-md-6 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Workout ID: @workout.Id</h5>
                        <p class="card-text">Duration: @workout.Duration minutes</p>
                        <p class="card-text">Date: @workout.Date.ToString("d")</p>

                        @if (workout.Logs.Any())
                        {
                            <h6 class="card-subtitle mb-2 text-muted">Exercise Logs:</h6>
                            <ul class="list-group">
                                @foreach (var log in workout.Logs)
                                {
                                    <li class="list-group-item">
                                        @log.Exercise.Name -
                                        @if (log.Sets.HasValue)
                                        {
                                            <span> Sets: @log.Sets</span>
                                        }
                                        @if (log.Reps.HasValue)
                                        {
                                            <span> Reps: @log.Reps</span>
                                        }
                                        @if (log.Weight.HasValue)
                                        {
                                            <span> Weight: @log.Weight</span>
                                        }
                                        @if (log.Duration.HasValue)
                                        {
                                            <span> Duration: @log.Duration</span>
                                        }
                                        @if (log.Distance.HasValue)
                                        {
                                            <span> Distance: @log.Distance</span>
                                        }
                                    </li>
                                    @if (isAuthorized)
                                    {
                                        <button class="btn btn-danger-bordered mt-2 ml-2" @onclick="() => OpenDeleteDialogE(log.WorkoutId, log.ExerciseId)">Delete Exercise</button>
                                        <button class="btn btn-update-bordered mt-2" @onclick="() => GoToUpdateExercise(log.WorkoutId, log.ExerciseId, userID)">Update Exercise</button>
                                    }
                                }
                            </ul>
                        }
                        @if (isAuthorized)
                        {
                            <button class="btn btn-update-bordered mt-2" @onclick="() => GoToUpdateWorkout(selectedUser.Id, workout.Id)">Update Workout</button>
                            <button class="btn btn-add-bordered mt-2" @onclick="() => GoToAdd(workout.Id, userID)">Add Exercise</button>
                            <button class="btn btn-danger-bordered mt-2 ml-2" @onclick="() => OpenDeleteDialogW(workout.Id)">Delete Workout </button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (isAuthorized)
{
    <button class="btn btn-add-bordered mt-2" @onclick="() => GoToAddWorkout(selectedUser.Id)">Add Workout</button>
}

@if (DeleteWorkoutDialogOpen)
{
    <ModalDialog Title="Are You Sure?" Text="Do you want to delete this workout?" OnClose="@OnDeleteDialogCloseW" DialogType="ModalDialog.ModalDialogType.DeleteCancel"></ModalDialog>
}

@if (DeleteExerciseDialogOpen)
{
    <ModalDialog Title="Are You Sure?" Text="Do you want to delete this exercise?" OnClose="@OnDeleteDialogCloseE" DialogType="ModalDialog.ModalDialogType.DeleteCancel"></ModalDialog>
}

@code {
    private List<Workout> workouts;
    private List<User> users;

    private User selectedUser;

    private int workoutToDeleteId;

    private int logWorkID;
    private int logExecId;

    public bool DeleteWorkoutDialogOpen { get; set; }
    public bool DeleteExerciseDialogOpen { get; set; }

    private List<(int UserId, bool IsAuthorized)> userAuthorizationList;

    private bool isAuthorized;

    [Parameter]
    public int userID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
        isAuthorized = await IsAuthorizedForWorkouts(userID, selectedUser.TrainerId);
    }

    private async Task LoadDataAsync()
    {
        await LoadWorkouts();
        await LoadSelectedUser();
        await LoadTrainers();
    }

    private async Task OnDeleteDialogCloseW(bool accepted)
    {
        if (accepted)
        {
            try
            {
                await repoW.DeleteAsync(workoutToDeleteId);
                var workoutsToRemove = workouts.FirstOrDefault(u => u.Id == workoutToDeleteId);
                if (workoutsToRemove != null)
                {
                    workouts.Remove(workoutsToRemove);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting workout: {ex.Message}");
            }
        }
        DeleteWorkoutDialogOpen = false;
        StateHasChanged();
    }

    private async Task OnDeleteDialogCloseE(bool accepted)
    {
        if (accepted)
        {
            try
            {
                await repoEl.DeleteAsyncExec(logWorkID, logExecId);

                var workoutToUpdate = workouts.FirstOrDefault(w => w.Id == logWorkID);

                if (workoutToUpdate != null)
                {
                    var logToRemove = workoutToUpdate.Logs.FirstOrDefault(log => log.ExerciseId == logExecId);
                    if (logToRemove != null)
                    {
                        workoutToUpdate.Logs.Remove(logToRemove);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting exercise log: {ex.Message}");
            }
        }
        DeleteExerciseDialogOpen = false;
        StateHasChanged();
    }

    private void OpenDeleteDialogW(int id)
    {
        DeleteWorkoutDialogOpen = true;
        workoutToDeleteId = id;
        StateHasChanged();
    }

    private void OpenDeleteDialogE(int id1, int id2)
    {
        DeleteExerciseDialogOpen = true;
        logWorkID = id1;
        logExecId = id2;
        StateHasChanged();
    }

    private async Task LoadWorkouts()
    {
        try
        {
            var colW = await repoW.GetAllAsync();
            workouts = colW.Where(w => w.User.Id == userID).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading workouts: {ex.Message}");
        }
    }

    private async Task LoadSelectedUser()
    {
        try
        {
            selectedUser = await repoU.GetByIdAsync(userID) ?? new User();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user: {ex.Message}");
        }
    }

    private async Task LoadTrainers()
    {
        try
        {
            var colU = await repoU.GetAllAsync();
            users = colU.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading trainers: {ex.Message}");
        }
    }

    private void GoToUpdateWorkout(int id1, int id2)
    {
        Navigation.NavigateTo($"/updateworkout/{id1}/{id2}");
    }

    private void GoToUpdateExercise(int id1, int id2, int id3)
    {
        Navigation.NavigateTo($"/updateexerciselog/{id1}/{id2}/{id3}");
    }

    private void GoToAdd(int id, int userId)
    {
        Navigation.NavigateTo($"/addexerciselog/{id}/{userId}");
    }

    private void GoToAddWorkout(int id)
    {
        Navigation.NavigateTo($"/addworkout/{id}");
    }

    private async Task<bool> IsAuthorizedForWorkouts(int userId, int? trainerId)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity == null || !user.Identity.IsAuthenticated)
        {
            return false;
        }

        if (user.IsInRole("Admin"))
        {
            return true;
        }

        var currentUserId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value);
        if (currentUserId == userId)
        {
            return true;
        }

        if (user.IsInRole("Trainer") && user.FindFirst(ClaimTypes.NameIdentifier)?.Value == trainerId.ToString())
        {
            return true;
        }

        return false;
    }
}
