@page "/workouts/{userID:int}"
@using SmartWorkout.DBAccess.Entities
@using SmartWorkout.DataAccess.Repositories
@using MudBlazor

@inject IGenericRepository<User> repoU;
@inject IGenericRepository<Workout> repoW;
@inject NavigationManager Navigation;

@attribute [StreamRendering]

@rendermode InteractiveServer

<PageTitle>Workouts</PageTitle>

<h1>Workouts</h1>

@if (workouts == null)
{
    <p><em>Loading...</em></p>
}
else if (workouts.Count == 0)
{
    <p><em>No workouts found for this user.</em></p>
}
else
{
    <h2>Workouts for @selectedUser.Name @selectedUser.Surname</h2>
    <div class="row">
        @foreach (var workout in workouts)
        {
            <div class="col-lg-4 col-md-6 mb-4">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Workout ID: @workout.Id</h5>
                        <p class="card-text">Duration: @workout.Duration minutes</p>
                        <p class="card-text">Date: @workout.Date.ToString("d")</p>

                        @if (workout.Logs.Any())
                        {
                            <h6 class="card-subtitle mb-2 text-muted">Exercise Logs:</h6>
                            <ul class="list-group">
                                @foreach (var log in workout.Logs)
                                {
                                    <li class="list-group-item">@log.Exercise.Name - Sets: @log.Sets, Reps: @log.Reps</li>
                                }
                            </ul>
                        }

                        <button class="btn btn-primary mt-2" @onclick="() => GoToUpdate(workout.Id)">Update</button>
                        <button class="btn btn-danger mt-2 ml-2" @onclick="() => OpenDeleteDialog(workout.Id)">Delete</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

<button class="btn btn-primary mt-2" @onclick="() => GoToAdd(selectedUser.Id)">Add Workout</button>

@if (DeleteDialogOpen)
{
    <ModalDialog Title="Are You Sure?" Text="Do you want to delete this workout?" OnClose="@OnDeleteDialogClose" DialogType="ModalDialog.ModalDialogType.DeleteCancel"></ModalDialog>
}

@code {
    private List<Workout> workouts;

    private User selectedUser;

    private int workoutToDeleteId;

    public bool DeleteDialogOpen { get; set; }

    [Parameter]
    public int userID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkouts();
        await LoadSelectedUser();
    }

    private async Task OnDeleteDialogClose(bool accepted)
    {
        if (accepted)
        {
            try
            {
                await repoW.DeleteAsync(workoutToDeleteId);
                var workoutsToRemove = workouts.FirstOrDefault(u => u.Id == workoutToDeleteId);
                if (workoutsToRemove != null)
                {
                    workouts.Remove(workoutsToRemove);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting workout: {ex.Message}");
            }
        }
        DeleteDialogOpen = false;
        StateHasChanged();
    }

    private void OpenDeleteDialog(int id)
    {
        DeleteDialogOpen = true;
        workoutToDeleteId = id;
        StateHasChanged();
    }

    private async Task LoadWorkouts()
    {
        try
        {
            var colW = await repoW.GetAllAsync();
            workouts = colW.Where(w => w.User.Id == userID).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading workouts: {ex.Message}");
        }
    }

    private async Task LoadSelectedUser()
    {
        try
        {
            selectedUser = await repoU.GetByIdAsync(userID) ?? new User();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user: {ex.Message}");
        }
    }

    private void GoToUpdate(int id)
    {
        Navigation.NavigateTo($"/updateexercise/{id}");
    }

    private void GoToAdd(int id)
    {
        Navigation.NavigateTo($"/addworkout/{id}");
    }
}
