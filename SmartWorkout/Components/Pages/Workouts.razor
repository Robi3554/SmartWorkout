@page "/workouts/{userID:int}"
@using SmartWorkout.DBAccess.Entities
@using SmartWorkout.DataAccess.Repositories
@using MudBlazor

@inject IGenericRepository<User> repoU;
@inject IGenericRepository<Workout> repoW;
@inject NavigationManager Navigation;

@attribute [StreamRendering]

@rendermode InteractiveServer

<PageTitle>Workouts</PageTitle>

<h1>Workouts</h1>

@if (workouts == null)
{
    <p><em>Loading...</em></p>
}
else if (workouts.Count == 0)
{
    <p><em>No workouts found for this user.</em></p>
}
else
{
    <p>Workouts for @selectedUser.Name @selectedUser.Surname</p>
    <table class="table">
        <thead class="header">
            <tr>
                <th>ID</th>
                <th>Duration(min)</th>
                <th>Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var workout in workouts)
            {
                <tr class="table-row">
                    <td>@workout.Id</td>
                    <td>@workout.Duration</td>
                    <td>@workout.Date.ToString("d")</td>
                    <td>
                        <button class="btn-primary" @onclick="() => GoToUpdate(workout.Id)">Update</button>
                        <button class="btn-primary" @onclick="() => Delete(workout.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Workout> workouts;

    private User selectedUser;

    [Parameter]
    public int userID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadWorkouts();
        await LoadSelectedUser();
    }

    private async Task LoadWorkouts()
    {
        try
        {
            var colW = await repoW.GetAllAsync();
            workouts = colW.Where(w => w.User.Id == userID).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading workouts: {ex.Message}");
        }
    }

    private async Task LoadSelectedUser()
    {
        try
        {
            selectedUser = await repoU.GetByIdAsync(userID) ?? new User();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user: {ex.Message}");
        }
    }

    private void GoToUpdate(int id)
    {
        Navigation.NavigateTo($"/updateexercise/{id}");
    }

    private async Task Delete(int id)
    {
        try
        {
            await repoW.DeleteAsync(id);
            var workoutsToRemove = workouts.FirstOrDefault(u => u.Id == id);
            if (workoutsToRemove != null)
            {
                workouts.Remove(workoutsToRemove);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting workout: {ex.Message}");
        }
    }
}
