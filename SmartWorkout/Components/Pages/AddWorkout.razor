@page "/addworkout/{userID:int}"
@using SmartWorkout.DBAccess.Entities
@using SmartWorkout.DataAccess.Repositories

@inject IGenericRepository<User> repoU;
@inject IGenericRepository<Workout> repoW;
@inject NavigationManager Navigation;

<h3>AddWorkout</h3>

<EditForm Model="newWorkout" OnValidSubmit="Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3 w-50">
        <label for="id">User</label>
        <InputNumber id="userId" class="form-control" @bind-Value="selectedUser.Id" disabled/>
    </div>

    <div class="form-control">
        @if (selectedUser != null)
        {
            <span>@selectedUser.Name @selectedUser.Surname</span>
        }
    </div>

    <div class="mb-3 w-50">
        <label for="duration">Workout Duration</label>
        <InputNumber id="duration" class="form-control" @bind-Value="newWorkout.Duration" />
    </div>

    <div class="mb-3 w-50">
        <label for="duration">Workout Date</label>
        <InputDate id="duration" class="form-control" @bind-Value="newWorkout.Date" />
    </div>
    <div>
        <button type="submit" class="btn btn-primary">Add Workout</button>
    </div>
</EditForm>

@code {
    private Workout newWorkout = new Workout();

    private User selectedUser;

    [Parameter]
    public int userID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        selectedUser = await repoU.GetByIdAsync(userID) ?? new User();

        newWorkout.Date = DateTime.Now;
    }

    private async Task Submit()
    {
        await repoW.AddAsync(newWorkout);
        Navigation.NavigateTo("/workouts");
    }

    private void GoToUpdate(int id)
    {
        Navigation.NavigateTo($"/showid/{id}");
    }
}
