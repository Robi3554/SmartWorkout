@page "/users"
@using SmartWorkout.DBAccess.Entities
@using SmartWorkout.DataAccess.Repositories

@inject IGenericRepository<User> repo;
@inject NavigationManager Navigation;

@attribute [StreamRendering]

@rendermode InteractiveServer

<PageTitle>Users</PageTitle>

<h1>Users</h1>

<form @onsubmit="HandleFormSubmit">
    <div>
        <SearchBar Items="users" OnSearch="OnSearchTermChanged"></SearchBar>
    </div>

    <div = class="container">
        <label>
            <input type="radio" name="search" value="name" @onchange="OnSearchFieldChanged" checked="@(selectedField == "name")"> Name
        </label>
        <label>
            <input type="radio" name="search" value="surname" @onchange="OnSearchFieldChanged" checked="@(selectedField == "surname")"> Surname
        </label>
        <label>
            <input type="radio" name="search" value="email" @onchange="OnSearchFieldChanged" checked="@(selectedField == "email")"> Email
        </label>
        <label>
            <input type="radio" name="search" value="phone" @onchange="OnSearchFieldChanged" checked="@(selectedField == "phone")"> Phone
        </label>
        <label>
            <input type="radio" name="search" value="weight" @onchange="OnSearchFieldChanged" checked="@(selectedField == "weight")"> Weight
        </label>
        <label>
            <input type="radio" name="search" value="age" @onchange="OnSearchFieldChanged" checked="@(selectedField == "age")"> Age
        </label>
    </div>    
</form>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead class="header">
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Surname</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Weight</th>
                <th>Age</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in _users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.Name</td>
                    <td>@user.Surname</td>
                    <td>@(user.Email ?? "NoEmail")</td>
                    <td>@(!string.IsNullOrEmpty(user.Phone) ? user.Phone : "NoPhone")</td>
                    <td>@(!string.IsNullOrEmpty(user.Weight.ToString()) ? user.Weight : "NoWeight")</td>
                    <td>@(!string.IsNullOrEmpty(user.Age.ToString()) ? user.Age : "NoAge")</td>
                    <td>
                        <button class="btn-primary-bordered" @onclick="() => GoToUpdate(user.Id)">Update</button>
                        <button class="btn-primary-bordered" @onclick="() => Delete(user.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<User> users = new List<User>();
    private List<User> _users = new List<User>();

    private string selectedField = "name";
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var col = await repo.GetAllAsync();
        users = col.ToList();
        _users = users.ToList();
    }

    protected async Task Delete(int id)
    {
        await repo.DeleteAsync(id);
        var userToRemove = users.FirstOrDefault(u => u.Id == id);
        if (userToRemove != null)
        {
            users.Remove(userToRemove);
            FilterUsers();
        }
    }

    protected void GoToUpdate(int id)
    {
        Navigation.NavigateTo($"/updateclient/{id}");
    }

    private void OnSearchFieldChanged(ChangeEventArgs e)
    {
        selectedField = e.Value.ToString();
        FilterUsers();
    }

    private void OnSearchTermChanged(string term)
    {
        searchTerm = term;
        FilterUsers();
    }

    private void HandleFormSubmit()
    {
        FilterUsers();
    }

    protected void FilterUsers()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            _users = users.ToList();
        }
        else
        {
            switch (selectedField)
            {
                case "name":
                    _users = users.Where(user => user.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
                    break;
                case "surname":
                    _users = users.Where(user => user.Surname.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
                    break;
                case "email":
                    _users = users.Where(user => user.Email != null && user.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
                    break;
                case "phone":
                    _users = users.Where(user => user.Phone != null && user.Phone.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
                    break;
                case "weight":
                    _users = users.Where(user => user.Weight != null && user.Weight.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
                    break;
                case "age":
                    _users = users.Where(user => user.Age != null && user.Age.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
                    break;
                default:
                    _users = users.ToList();
                    break;
            }
        }
    }
}
