@page "/users"
@using SmartWorkout.DBAccess.Entities
@using SmartWorkout.DataAccess.Repositories

@inject IGenericRepository<User> repo;
@inject NavigationManager Navigation;

@attribute [StreamRendering]

<PageTitle>Users</PageTitle>

<h1>Users</h1>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Surname</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Weight</th>
                <th>Age</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.Name</td>
                    <td>@user.Surname</td>
                    <td>@(user.Email ?? "NoEmail")</td>
                    <td>@(!string.IsNullOrEmpty(user.Phone) ? user.Phone : "NoPhone")</td>
                    <td>@(!string.IsNullOrEmpty(user.Weight.ToString()) ? user.Weight : "NoWeight")</td>
                    <td>@(!string.IsNullOrEmpty(user.Age.ToString()) ? user.Age : "NoAge")</td>
                    <td>
                        <button @onclick="() => GoToUpdate(user.Id)">Update</button>
                        <button @onclick="() => Delete(user.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<User> users = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        var col = await repo.GetAllAsync();
        users = col.ToList();
    }

    protected async Task Delete(int id)
    {
        await repo.DeleteAsync(id);
        var userToRemove = users.FirstOrDefault(u => u.Id == id);
        if (userToRemove != null)
        {
            users.Remove(userToRemove);
        }
    }

    protected void GoToUpdate(int id)
    {
        Navigation.NavigateTo($"/updateClient/{id}");
    }
}
