@page "/users"
@using SmartWorkout.DBAccess.Entities
@using SmartWorkout.DataAccess.Repositories
@using System.Security.Claims
@using SmartWorkout.DataAccess.Services

@inject IGenericRepository<User> repo
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject FollowService FollowService

@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Users</PageTitle>

<h1>Users</h1>

<form @onsubmit="HandleFormSubmit">
    <div>
        <SearchBar Items="_users" OnSearch="OnSearchTermChanged"></SearchBar>
    </div>

    <div class="container">
        <label>
            <input type="radio" name="search" value="name" @onchange="OnSearchFieldChanged" checked="@(selectedField == "name")"> Name
        </label>
        <label>
            <input type="radio" name="search" value="surname" @onchange="OnSearchFieldChanged" checked="@(selectedField == "surname")"> Surname
        </label>
        <label>
            <input type="radio" name="search" value="email" @onchange="OnSearchFieldChanged" checked="@(selectedField == "email")"> Email
        </label>
        <label>
            <input type="radio" name="search" value="phone" @onchange="OnSearchFieldChanged" checked="@(selectedField == "phone")"> Phone
        </label>
        <label>
            <input type="radio" name="search" value="weight" @onchange="OnSearchFieldChanged" checked="@(selectedField == "weight")"> Weight
        </label>
        <label>
            <input type="radio" name="search" value="age" @onchange="OnSearchFieldChanged" checked="@(selectedField == "age")"> Age
        </label>
    </div>
</form>

@if (_users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead class="header">
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Surname</th>
               @*  <th>Email</th> *@
                <th>Phone</th>
                <th>Weight</th>
                <th>Age</th>
                <th>Role</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in _users.Where(u => u.Role != "Admin"))
            {
                var userAuthorization = userAuthorizationList.FirstOrDefault(x => x.UserId == user.Id);
                var isAuthorized = !userAuthorization.Equals(default) && userAuthorization.IsAuthorized;

                bool showButton = user.Id != CurrentUserId;

                <tr>
                    <td>@user.Id</td>
                    <td>@user.Name</td>
                    <td>@user.Surname</td>
                   @*  <td>@(user.Email ?? "NoEmail")</td> *@
                    <td>@(!string.IsNullOrEmpty(user.Phone) ? user.Phone : "NoPhone")</td>
                    <td>@(!string.IsNullOrEmpty(user.Weight?.ToString()) ? user.Weight.ToString() : "NoWeight")</td>
                    <td>@(!string.IsNullOrEmpty(user.Age?.ToString()) ? user.Age.ToString() : "NoAge")</td>
                    <td>@user.Role</td>
                    <td>
                        @if (isAuthorized)
                        {
                            <button class="btn-primary-bordered" @onclick="() => ViewWorkouts(user.Id)">Workouts</button>
                            if (!showButton)
                            {
                                <button class="btn-primary-bordered" @onclick="() => GoToTrainers(user.Id)">Select Trainer</button>
                            }

                        }
                        @if (IsAdmin())
                        {
                            <button class="btn-update-bordered" @onclick="() => GoToUpdate(user.Id)">Update</button>
                            <button class="btn-danger-bordered" @onclick="() => OpenDeleteDialog(user.Id)">Delete</button>
                        }
                        @if (IsFollowRequestSent)
                        {
                            <button class="btn-primary" disabled>
                                Follow Request Sent
                            </button>
                        }
                        else if (!isAuthorized)
                        {
                            <button class="btn-primary-bordered" @onclick="() => SendFollowRequest(user.Id)">
                                <i class="bi bi-indent"></i>
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (DeleteDialogOpen)
{
    <ModalDialog Title="Are You Sure?" Text="Do you want to delete this user?" OnClose="@OnDeleteDialogClose" DialogType="ModalDialog.ModalDialogType.DeleteCancel"></ModalDialog>
}

@code {
    private List<User> users;
    private List<User> _users;
    private bool DeleteDialogOpen;
    private int userToDeleteId;
    private string selectedField = "name";
    private string searchTerm = string.Empty;

    private int CurrentUserId => int.Parse((AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.FindFirst(ClaimTypes.NameIdentifier)?.Value));

    private bool IsFollowRequestSent { get; set; }
    private bool HideFollow { get; set; }
    private bool followsUser;

    private List<(int UserId, bool IsAuthorized)> userAuthorizationList;

    protected override async Task OnInitializedAsync()
    {
        var col = await repo.GetAllAsync();
        users = col.ToList();
        _users = users.ToList();

        userAuthorizationList = new List<(int UserId, bool IsAuthorized)>();

        foreach (var user in _users.Where(u => u.Role != "Admin"))
        {
            bool isAuthorized = await IsAuthorizedForWorkouts(user.Id, user.TrainerId);
            userAuthorizationList.Add((user.Id, isAuthorized));
        }
    }

    #region DialogDelete
    private async Task OnDeleteDialogClose(bool accepted)
    {
        if (accepted)
        {
            try
            {
                await repo.DeleteAsync(userToDeleteId);
                var userToDelete = users.FirstOrDefault(u => u.Id == userToDeleteId);
                if (userToDelete != null)
                {
                    users.Remove(userToDelete);
                    _users.Remove(userToDelete);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting user: {ex.Message}");
            }
        }
        DeleteDialogOpen = false;
        StateHasChanged();
    }

    private void OpenDeleteDialog(int id)
    {
        DeleteDialogOpen = true;
        userToDeleteId = id;
        StateHasChanged();
    }
    #endregion

    #region GoTos
    protected void GoToUpdate(int id)
    {
        Navigation.NavigateTo($"/updateclient/{id}");
    }

    protected void GoToTrainers(int id)
    {
        Navigation.NavigateTo($"/selecttrainer/{id}");
    }

    protected void ViewWorkouts(int id)
    {
        Navigation.NavigateTo($"/workouts/{id}");
    }
    #endregion

    #region Following
    private async Task SendFollowRequest(int receiverId)
    {
        var requesterId = CurrentUserId;

        await FollowService.SendFollowRequestAsync(requesterId, receiverId);

        IsFollowRequestSent = true;

        await RefreshUsers();
    }

    private async Task RefreshUsers()
    {
        var col = await repo.GetAllAsync();
        _users = col.ToList();
    }

    private async Task<bool> ShouldHideFollowButton(int userId, string userRole)
    {
        var loggedInUserId = CurrentUserId;
        var loggedInUserRole = (AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.FindFirst(ClaimTypes.Role)?.Value) ?? "";

        return loggedInUserId == userId ||
               loggedInUserRole == "Admin" ||
               await FollowService.IsFollowRequestSentAsync(loggedInUserId, userId);
    }

    private async Task<bool> IsFollowing(int requesterId, int receiverId)
    {
        try
        {
            var followRequest = await FollowService.GetFollowRequestAsync(requesterId, receiverId);
            return followRequest != null && followRequest.IsAccepted;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking follow status: {ex.Message}");
            return false;
        }
    }

    private async Task<bool> DoesCurrentUserFollow(int userId)
    {
        try
        {
            var currentUserId = CurrentUserId;
            var isFollowing = await FollowService.IsFollowing(currentUserId, userId);
            return isFollowing;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking follow status: {ex.Message}");
            return false;
        }
    }
    #endregion

    private void OnSearchFieldChanged(ChangeEventArgs e)
    {
        selectedField = e.Value.ToString();
        FilterUsers();
    }

    private void OnSearchTermChanged(string term)
    {
        searchTerm = term;
        FilterUsers();
    }

    private void HandleFormSubmit()
    {
        FilterUsers();
    }

    protected void FilterUsers()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            _users = users.ToList();
        }
        else
        {
            switch (selectedField)
            {
                case "name":
                    _users = users.Where(user => user.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
                    break;
                case "surname":
                    _users = users.Where(user => user.Surname.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
                    break;
                case "email":
                    _users = users.Where(user => user.Email != null && user.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
                    break;
                case "phone":
                    _users = users.Where(user => user.Phone != null && user.Phone.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
                    break;
                case "weight":
                    _users = users.Where(user => user.Weight != null && user.Weight.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
                    break;
                case "age":
                    _users = users.Where(user => user.Age != null && user.Age.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
                    break;
                default:
                    _users = users.ToList();
                    break;
            }
        }
    }

    private bool IsAdmin()
    {
        var authState = AuthenticationStateProvider.GetAuthenticationStateAsync().Result;
        return authState.User.IsInRole("Admin");
    }

    private async Task<bool> IsAuthorizedForWorkouts(int userId, int? trainerId)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity == null || !user.Identity.IsAuthenticated)
        {
            return false;
        }

        if (user.IsInRole("Admin") || (user.IsInRole("Trainer") && user.FindFirst(ClaimTypes.NameIdentifier)?.Value == trainerId.ToString()))
        {
            return true;
        }

        var currentUserId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value);
        if (currentUserId == userId)
        {
            return true;
        }

        followsUser = await DoesCurrentUserFollow(userId);

        return followsUser;
    }
}
