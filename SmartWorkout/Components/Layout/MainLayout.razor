@inherits LayoutComponentBase
@inject AudioService AudioService
@inject IJSRuntime JSRuntime

<HeadContent>
    @if (isDarkMode)
    {
        <link rel="stylesheet" href="DarkMode.css"/>
    }
</HeadContent>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault" checked="@isDarkMode" @onchange="@OnCheckboxChange"/>
                <label class="form-check-label" for="flexSwitchCheckDefault">Dark Mode</label>
            </div>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

<footer>
    <div>
        <h1>Currently Playing: @AudioService.CurrentAudioName</h1>
        <audio controls @ref="audioPlayer" @onended="PlayNext">
            <source src="@AudioService.CurrentAudio" type="audio/mpeg">
            Your browser does not support the audio tag.
        </audio>
    </div>
</footer>


@code{
    private bool isDarkMode = false;

    private ElementReference audioPlayer;

    private void OnCheckboxChange(ChangeEventArgs e){
        if(e.Value != null)
        {
            isDarkMode = (bool)e.Value;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !string.IsNullOrEmpty(AudioService.CurrentAudio))
        {
            await JSRuntime.InvokeVoidAsync("playAudio", "audioPlayer");
        }
    }

    private async Task PlayNext()
    {
        AudioService.PlayNextAudio();
        StateHasChanged();
        await JSRuntime.InvokeVoidAsync("playAudio", "audioPlayer");
    }
}

<script>
    window.playAudio = function (audioId) {
        var audioElement = document.getElementById(audioId);
        if (audioElement) {
            audioElement.play();
        }
    };

    window.getCurrentTime = function (audioElement) {
        return audioElement.currentTime;
    };

    window.getDuration = function (audioElement) {
        return audioElement.duration;
    };
</script>
